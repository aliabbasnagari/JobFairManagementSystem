@model CreateScheduleVM

@{
    ViewBag.Title = "Create Schedule";
    Layout = "_SideBarLayout";
    ViewBag.active = 4;
}

<h2>Create Schedule</h2>

@using (Html.BeginForm("AddSlot", "Candidate"))
{
    @Html.ValidationSummary()
    <div class="d-flex mb-3">
        <div class="d-block me-2">
            @Html.LabelFor(m => m.Slot.StartTime)
            @Html.TextBoxFor(m => m.Slot.StartTime, new { @class = "form-control", Type = "time" })
        </div>

        <div class="d-block me-2">
            @Html.LabelFor(m => m.Slot.EndTime)
            @Html.TextBoxFor(m => m.Slot.EndTime, new { @class = "form-control", Type = "time" })
        </div>
        <div class="d-block">
            @Html.LabelFor(m => m.Slot.Title)
            @Html.TextBoxFor(m => m.Slot.Title, new { @class = "form-control", value = "New" })
        </div>
        <div class="d-block w-100 mx-2">
            @Html.LabelFor(m => m.Slot.Description)
            @Html.TextBoxFor(m => m.Slot.Description, new { @class = "form-control" })
        </div>
        <div class="d-block">
            @Html.Label("", "add slot", new { @class = "opacity-0" })
            <button type="submit" class="btn btn-success">Add Slot</button>
        </div>
    </div>
}

<table class="table table-bordered">
    @if (Model.Schedule?.Slots != null)
    {

        <thead>
            <tr>
                <th style="width: 200px;" scope="col">Slot</th>
                <th scope="col">Title</th>
                <th scope="col">Status</th>
                <th scope="col">Company</th>
                <th scope="col">Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var slot in Model.Schedule.Slots)
            {
                <tr>
                    <td>@slot.StartTime.ToString("hh:mm tt") - @slot.EndTime.ToString("hh:mm tt")</td>
                    <td>@slot.Title</td>
                    <td>@(slot.Reserved ? "Reserved" : "Free")</td>
                    <td>
                        @if (slot.Reserved)
                        {
                            <div class="d-flex">
                                <p>@slot.User?.Email</p>
                                <div class="ms-2 dropdown">
                                    <a class="bi bi-caret-down-fill" data-bs-toggle="dropdown" aria-expanded="false"></a>
                                    <ul class="dropdown-menu">
                                        <a asp-action="ShowCandidateProfile" class="dropdown-item">Show Profile</a>
                                        <a asp-controller="Company" asp-action="SendInterviewRemainder" asp-route-rid="@slot.UserId" asp-route-slot="@slot" asp-route-id="@slot.Id" class="dropdown-item">Send Remainder</a>
                                        <a asp-action="InterviewTaken" class="dropdown-item">Mark Done</a>
                                    </ul>
                                </div>
                            </div>
                        }
                        else
                        {
                            <p>N/A</p>
                        }
                    </td>
                    <td>
                        <div class="ms-2 dropdown">
                            <a class="bi bi-caret-down-fill" data-bs-toggle="dropdown" aria-expanded="false"></a>
                            <ul class="dropdown-menu">
                                <a asp-controller="Company" asp-action="DeleteSlot" asp-route-id="@slot.Id" class="dropdown-item text-danger">Delete</a>
                            </ul>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    }
</table>

<div>
    <canvas id="myChart" height="100"></canvas>
</div>
@section Scripts {

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns/dist/chartjs-adapter-date-fns.bundle.min.js"></script>
    <script>

        var slots = @Html.Raw(Json.Serialize(Model.Schedule?.Slots));

        var data_slots = slots.map(slot => ({
            name: slot['title'],
            start: new Date(slot["startTime"]),
            end: new Date(slot["endTime"]),
            username: slot["user"] ? slot["user"]["name"] : "Slot is Free",
            usermail: slot["user"] ? slot["user"]["email"] : "N/A"
        }));

        const labels = data_slots.map(slot => slot.name);
        const data = data_slots.map(slot => {
            const duration = (slot.end - slot.start) / (1000 * 60);
            const starts = new Date(slot.start).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', hour12: true });
            const ends = new Date(slot.end).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', hour12: true });
            const stamp = starts + " - " + ends
            return {
                x: [slot.start, slot.end],
                y: duration,
                se: stamp,
                username: slot.username,
                usermail: slot.usermail
            };
        });

        var minTime = new Date();
        minTime.setHours(8);
        minTime.setMinutes(0);
        minTime.setSeconds(0);
        minTime.setMilliseconds(0);

        var maxTime = new Date();
        maxTime.setHours(18);
        maxTime.setMinutes(0);
        maxTime.setSeconds(0);
        maxTime.setMilliseconds(0);

        const bgColorBase = [
            '54, 162, 235',
            '255, 99, 132',
            '255, 206, 86',
            '75, 192, 192',
            '153, 102, 255',
            '255, 159, 64',
            '255, 69, 0',
            '255, 140, 0',
            '255, 215, 0',
            '218, 165, 32',
            '184, 134, 11',
            '154, 205, 50',
            '50, 205, 50',
            '144, 238, 144',
            '0, 128, 0',
            '0, 255, 0',
            '0, 250, 154',
            '46, 139, 87',
            '32, 178, 170',
            '0, 139, 139',
            '0, 255, 255',
            '0, 206, 209',
            '65, 105, 225',
            '0, 0, 255',
            '138, 43, 226',
            '75, 0, 130',
            '148, 0, 211',
            '186, 85, 211',
            '221, 160, 221',
            '128, 0, 128',
            '255, 0, 255',
            '255, 20, 147',
            '255, 105, 180',
            '255, 182, 193',
            '255, 228, 225'
        ];


        const backgroundColors = slots.map((slot, index) => {
            if (slot['reserved']) {
                return `rgba(${bgColorBase[index]}, 0.8)`;
            } else {
                return `rgba(${bgColorBase[index]}, 0.5)`;
            }
        });


        // Create Chart
        const ctx = document.getElementById('myChart');
        new Chart(ctx, {
            type: 'bar',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Interview Slots',
                    data: data,
                    backgroundColor: backgroundColors,
                    borderColor: 'rgba(0, 0, 0, 0.6)',
                    borderWidth: 1,
                    borderSkipped: false,
                    borderRadius: 10
                }]
            },
            options: {
                indexAxis: 'y',
                responsive: true,
                scales: {
                    x: {
                        type: 'time',
                        time: {
                            minUnit: 'minute',
                            unit: 'minute', displayFormats: {
                                minute: 'h:mm a' // Format for displaying hours and minutes
                            },
                        }, grid: {
                            innerHeight: 30
                        },
                        ticks: {
                            stepSize: 15
                        },
                        min: minTime,
                        max: maxTime
                    }
                },
                plugins: {
                    tooltip: {
                        callbacks: {
                            label: function (context) {
                                return context.raw.se + ' [' + context.raw.y + ' min]';
                            },
                            title: function (context) {
                                return context[0].raw.username + "\n" + context[0].raw.usermail;
                            }
                        }
                    }, legend: {
                        display: false
                    }
                }, datasets: {
                    barThickness: 10 // Set the height of the bars
                }
            }
        });
    </script>
}
